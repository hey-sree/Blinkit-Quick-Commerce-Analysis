<h1 align="center">🛒 Blinkit Quick Commerce Analysis</h1>

<h3 align="center">End-to-End Data Analytics Project | Excel · SQL · Python · Power BI</h3>

<p align="center">Analyzing sales performance, customer behavior, and product insights for Blinkit to improve quick-commerce growth and operational efficiency.</p>

---

<h2>🎯 Business Problem</h2>

Quick-commerce platforms like <b>Blinkit</b> rely on <i>speed + efficiency</i> to drive customer satisfaction and retention.  
To stay competitive, businesses need insights into sales trends, product demand, customer preferences, and profitability.  

This project provides a <b>360° analysis</b> of Blinkit’s operations — from raw dataset → cleaning → SQL insights → Python EDA → Power BI storytelling dashboard.

---

<h2>🛠 Tools & Technologies</h2>

- <b>Excel</b> → Data cleaning, preparation, and formatting  
- <b>SQL</b> → Querying dataset to extract sales insights  
- <b>Python</b> → Exploratory Data Analysis (EDA), data visualization  
- <b>Power BI</b> → Interactive dashboard for storytelling and decision-making  

---

<h2>🗂 Dataset</h2>

- File: Blinkit Dataset (CSV/Excel)  
- Size: ~8K+ records  
- Features: Item Identifier, Item Type, Outlet Info, Sales, Visibility, Fat Content, Location, Outlet Size, etc.  
- Source: Open-source Blinkit Quick Commerce dataset (for analytics & learning purposes)  

---

<h2>🔍 Step-by-Step Workflow</h2>

<b>1. Excel Cleaning & Prep</b>  
- Removed nulls, duplicates, formatting errors  
- Standardized categorical fields (e.g., Fat Content → Low Fat, Regular)  
- Derived new columns (e.g., Outlet_Age, Item_Category_Group)  

<b>2. SQL Exploration</b>  
- Imported dataset into MySQL  
- Wrote 15+ queries to analyze:  
  - Sales by Item Type & Outlet  
  - Impact of Outlet Size & Location on Revenue  
  - Top-selling vs low-performing products  
  - Fat Content vs Sales patterns  

<b>3. Python EDA (Jupyter Notebook)</b>  
- Performed univariate & bivariate analysis  
- Distribution of Item Sales, Item Visibility, MRP  
- Correlation heatmaps & outlier detection  
- Grouped insights by Item Type, Outlet Location, and Fat Content  

<b>4. Power BI Dashboard</b>  
- Built an executive dashboard to track KPIs:  
  - Total Sales, Avg Sales per Outlet, Most Profitable Outlet, Top Product Categories  

<b>Visuals:</b>  
- Sales by Item Type  
- Outlet Size vs Sales  
- Fat Content Contribution  
- Location-based Sales Heatmap  
- Filters: Item Type, Outlet Type, Outlet Size  
- Used DAX for metrics like <i>Total Sales Growth %</i>  

---

<h2>📊 Power BI Dashboard</h2>

Here’s a snapshot of the interactive dashboard 👇  

![Blinkit Dashboard](Images/dashboard.png)

---

<h2>📁 Project Folder Structure</h2>

Blinkit-Quick-Commerce-Analysis/
├── 📊 PowerBI/
│ └── Blinkit_Dashboard.pbix
├── 🐍 Python/
│ └── blinkit_EDA.ipynb
├── 🧮 SQL/
│ └── Blinkit_Queries.sql
├── 📈 Excel/
│ └── blinkit_cleaned.xlsx
├── 📑 Docs/
│ ├── README.md
│ ├── Project_Report.docx
│ └── Dashboard_Screenshot.png


---

<h2>✅ Key Outcomes</h2>

- Delivered an <b>end-to-end analytics pipeline</b> from raw Blinkit dataset → cleaned → insights → dashboard  
- Identified <b>top-performing categories and outlets</b>  
- Found actionable insights on how outlet size, location & product mix impact revenue  
- Built a <b>recruiter-ready portfolio project</b>  

---

<h2>📌 Future Enhancements</h2>

- Predictive modeling: Forecast sales by Item/Outlet  
- Automate reporting with Power Automate  
- Deploy Power BI dashboard to Power BI Service for online access  

